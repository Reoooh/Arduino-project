//include <Adafruit_CircuitPlayground.h>
//include <Adafruit_Circuit_Playground.h>

/* 
GY-33-----pro mini 5v 16m
VCC----VCC
CT----A5
DR----A4
GND--GND
S0---GND
*/
/////////////////////////////////
////////////////////////////////
/*
uart 
send 'b'-----Calibration GY-33
send 'a'-----GY33 send data

*/

#include <Servo.h>
#include <i2cmaster.h>
Servo base, fArm, rArm, claw ,danjia;//创建5个servo对象
//存储电机极限值(const指定该数值为常量,常量数值在程序运行中不能改变)

int DSD = 15; //Default Servo Delay (默认电机运动延迟时间)
              //此变量用于控制电机运行速度.增大此变量数值将
              //降低电机运行速度从而控制机械臂动作速度
              
const int baseMin = 0;
const int baseMax = 180;
const int rArmMin = 0;
const int rArmMax = 180;
const int fArmMin = 0;
const int fArmMax = 180;
const int clawMin = 0;
const int clawMax = 180;
const int danjiaMin = 0;
const int danjiaMax = 360;
//传感器

const int E18A = 2;//光电传感器-寻找标志物
const int E18B = 3;//光电传感器-寻找树坑

#define uint16_t unsigned int
typedef struct
{
    uint16_t Red;
    uint16_t Green;
    uint16_t Blue;
    uint16_t Clear;
} RGB;
unsigned char Re_buf;
unsigned char sign=0;
RGB rgb;
uint16_t CT=0,Lux=0;
byte color=0,rgb_data[3]={0};

void setup() {
   Serial.begin(115200);
       i2c_init();
        delay(1); 
  
 
  pinMode(E18A,INPUT);
  pinMode(E18B,INPUT);
  
  base.attach(11);     // base 伺服舵机连接引脚11 舵机代号'b'
  delay(200);          // 稳定性等待
  rArm.attach(10);     // rArm 伺服舵机连接引脚10 舵机代号'r'
  delay(200);          // 稳定性等待
  fArm.attach(9);      // fArm 伺服舵机连接引脚9  舵机代号'f'
  delay(200);          // 稳定性等待
  claw.attach(6);      // claw 伺服舵机连接引脚6  舵机代号'c'
  delay(200);          // 稳定性等待
  
  
  base.write(90); 
  delay(10);
  fArm.write(110); 
  delay(10);
  rArm.write(45); 
  delay(10);
  claw.write(55);  
  delay(10); 
  
//  Serial.begin(9600);
  Serial.println("Welcome to zhong er d shije");
}


void loop() {
  
  Original();
 
  delay(50);
  Serial.println("Welcome to zhong er d shi jie ");   
  int Infrared_sensor_H = digitalRead(E18A);//取树标志物
  Serial.println(Infrared_sensor_H);   
  int col = Color_sensor();   
  int Infrared_sensor = digitalRead(E18B);//放树标志物
  bool B=0,G=0;
  Serial.println(Infrared_sensor);   
  
  Serial.println(col);   
  if(Infrared_sensor_H==0){
    switch(col){//取树
      case 128:gettree_B();break;
      case 16:gettree_G();break;
      default:break;
    }
  }
  else if(Infrared_sensor==0) 
 
  switch(col){//放树
    case 128:puttree_B();break;
    case 16:puttree_G();break;
    default: break;
     
    }
    Serial.println("4");   
    delay(3000);
}

 
/*机械臂动作集------------------------------------------------*/

void Original(){//设置为初始状态

  base.write(90);
  delay(20);
  claw.write(55);
  delay(20);
  fArm.write(110);
  delay(20);
  rArm.write(45);
  delay(20);
}


void gettree_B(){
       //抓蓝1（50） 
      Serial.println("取树，蓝色");

       rArm.write(45);
        delay(20);
        fArm.write(0);
        delay(1000);
        claw.write(128);
        delay(1000);
        fArm.write(100);
        delay(1000);
        
        base.write(50);
        delay(1000);
        fArm.write(180);
        claw.write(55);
        delay(1000);
        Serial.println("取树完成");
       
/*   //抓蓝2
         rArm.write(45);
        delay(20);
        fArm.write(0);
        delay(1000);
        claw.write(128);
        delay(1000);
        fArm.write(100);
        delay(1000);
        
        base.write(65
        );
        delay(1000);
        fArm.write(180);
        claw.write(55);
        delay(1000);
        
     // 结束抓取物品    
 */       
        
}
void gettree_G(){
    //抓绿1（100）
    Serial.println("取树，绿色");
    rArm.write(45);
     delay(20);
    fArm.write(0);
     delay(1000);
    claw.write(128);
     delay(1000);
    fArm.write(100);
     delay(1000);
    base.write(100);
    fArm.write(180);
     delay(1000);      
    claw.write(55);
     delay (500);
    rArm.write(150);
    
    Serial.println("取树完成");
         // 结束抓取物品
         
   /*   //抓绿（145）
      rArm.write(45);
        delay(20);
         fArm.write(0);
        delay(1000);
        claw.write(128);
        delay(1000);
        fArm.write(100);
        delay(1000);
        base.write(145);
        delay(1000);
        fArm.write(180);
        delay(1000);
        claw.write(55);
        delay (500);
        rArm.write(150);
       

         // 结束抓取物品
       
        Original();
        // 返回初始状态

*/
}
void puttree_B(){
      //取出蓝1
       Serial.println("放树，蓝色");
       base.write(50);
       delay(1000);
       rArm.write(180);
        delay(1000);
       fArm.write(180);
        delay(1000);
       rArm.write(45);
        delay(1000);
       claw.write(128);
        delay(1000);
       fArm.write(130);
        delay(1000);
       base.write(90);
        delay(1000);
       fArm.write(0);
        delay(1000);
       claw.write(55);
        delay(1000);
       Serial.println("放树完成");

    /*    //取出蓝2
        base.write(65);
       delay(1000);
       rArm.write(180);
        delay(1000);
       fArm.write(180);
        delay(1000);
       rArm.write(45);
        delay(1000);
       claw.write(128);
        delay(1000);
       fArm.write(130);
        delay(1000);
       base.write(90);
        delay(1000);
       fArm.write(0);
        delay(1000);
       claw.write(55);
        delay(1000);

*/        
}
void puttree_G(){
       Serial.println("放树，绿色");
       base.write(100);
       delay(1000);
       rArm.write(180);
        delay(1000);
       fArm.write(180);
        delay(1000);
       rArm.write(45);
        delay(1000);
       claw.write(128);
        delay(1000);
       fArm.write(130);
        delay(1000);
       base.write(90);
        delay(1000);
       fArm.write(0);
        delay(1000);
       claw.write(55);
        delay(1000);
       Serial.println("放树完成");
/*
       base.write(145);
       delay(1000);
       rArm.write(180);
        delay(1000);
       fArm.write(180);
        delay(1000);
       rArm.write(45);
        delay(1000);
       claw.write(128);
        delay(1000);
       fArm.write(130);
        delay(1000);
       base.write(90);
        delay(1000);
       fArm.write(0);
        delay(1000);
       claw.write(55);
        delay(1000);
*/
  
}

/*串口命令集-----------------------------------------------------------------------*/
void armDataCmd(char serialCmd){ //Arduino根据串行指令执行相应操作
                                 //指令示例：b45 底盘转到45度角度位置
                                 //          o 输出机械臂舵机状态信息
  if (serialCmd == 'b' || serialCmd == 'c' || serialCmd == 'f' || serialCmd == 'r'){
    int servoData = Serial.parseInt();
    servoCmd(serialCmd, servoData, DSD);  // 机械臂舵机运行函数（参数：舵机名，目标角度，延迟/速度）
  } else {
    switch(serialCmd){    
      case 'o':  // 输出舵机状态信息
        reportStatus();
        break;
 
      case 'i':
        armIniPos();  
        break;
         
      default:  //未知指令反馈
        Serial.println("Unknown Command.");
    }
  }  
}
void servoCmd(char servoName, int toPos, int servoDelay){  
  Servo servo2go;  //创建servo对象
 
  //串口监视器输出接收指令信息
  Serial.println("");
  Serial.print("+Command: Servo ");
  Serial.print(servoName);
  Serial.print(" to ");
  Serial.print(toPos);
  Serial.print(" at servoDelay value ");
  Serial.print(servoDelay);
  Serial.println(".");
  Serial.println("");  
  
  int fromPos; //建立变量，存储电机起始运动角度值
  
  switch(servoName){
    case 'b':
      if(toPos >= baseMin && toPos <= baseMax){
        servo2go = base;
        fromPos = base.read();  // 获取当前电机角度值用于“电机运动起始角度值”
        break;
      } else {
        Serial.println("+Warning: Base Servo Value Out Of Limit!");
        return;
      }
 
    case 'c':
      if(toPos >= clawMin && toPos <= clawMax){    
        servo2go = claw;
        fromPos = claw.read();  // 获取当前电机角度值用于“电机运动起始角度值”
        break;
      } else {
        Serial.println("+Warning: Claw Servo Value Out Of Limit!");
        return;        
      }
 
    case 'f':
      if(toPos >= fArmMin && toPos <= fArmMax){
        servo2go = fArm;
        fromPos = fArm.read();  // 获取当前电机角度值用于“电机运动起始角度值”
        break;
      } else {
        Serial.println("+Warning: fArm Servo Value Out Of Limit!");
        return;
      }
         
    case 'r':
      if(toPos >= rArmMin && toPos <= rArmMax){
        servo2go = rArm;
        fromPos = rArm.read();  // 获取当前电机角度值用于“电机运动起始角度值”
        break;
      } else {
        Serial.println("+Warning: rArm Servo Value Out Of Limit!");
        return;
      }      
  }
 
  //指挥电机运行
  if (fromPos <= toPos){  //如果“起始角度值”小于“目标角度值”
    for (int i=fromPos; i<=toPos; i++){
      servo2go.write(i);
      delay (servoDelay);
    }
  }  else { //否则“起始角度值”大于“目标角度值”
    for (int i=fromPos; i>=toPos; i--){
      servo2go.write(i);
      delay (servoDelay);
    }
  }
}
 
void reportStatus(){  //舵机状态信息
  Serial.println("");
  Serial.println("");
  Serial.println("+ Robot-Arm Status Report +");
  Serial.print("Claw Position: "); Serial.println(claw.read());
  Serial.print("Base Position: "); Serial.println(base.read());
  Serial.print("Rear  Arm Position:"); Serial.println(rArm.read());
  Serial.print("Front Arm Position:"); Serial.println(fArm.read());
  Serial.println("++++++++++++++++++++++++++");
  Serial.println("");
}
 
void armIniPos(){
  Serial.println("+Command: Restore Initial Position.");
  int robotIniPosArray[4][3] = {
    {'b', 90, DSD},
    {'r', 90, DSD},
    {'f', 90, DSD},
    {'c', 90, DSD} 
  };   
 
  for (int i = 0; i < 4; i++){
    servoCmd(robotIniPosArray[i][0], robotIniPosArray[i][1], robotIniPosArray[i][2]);
  }
}

/*----------------------------------------------------------------------------------------*/
int Color_sensor(){
  unsigned char data[9]={0};
 if(!sign)
 {
   iic_read(0x00,data,8);
   rgb.Red=(data[0]<<8)|data[1];
   rgb.Green=(data[2]<<8)|data[3];
   rgb.Blue=(data[4]<<8)|data[5];
   rgb.Clear=(data[6]<<8)|data[7];
   Serial.print("Red: ");
   Serial.print(rgb.Red);
   Serial.print(",Green: ");
   Serial.print( rgb.Green);
   Serial.print(",Blue");
   Serial.print( rgb.Blue);
   Serial.print(",Clear");
   Serial.println(rgb.Clear);
   iic_read(0x08,data,4);
   Lux=(data[0]<<8)|data[1];
   CT=(data[2]<<8)|data[3];
   
   Serial.print("CT:");
   Serial.print(CT);
   Serial.print(",Lux:");
   Serial.println( Lux);
    iic_read(0x0c,data,3);
    rgb_data[0]=data[0];
    rgb_data[1]=data[1];
    rgb_data[2]=data[2];
    Serial.print("r:");
    Serial.print( rgb_data[0]);
    Serial.print(",g:"); 
    Serial.print( rgb_data[1]);
    Serial.print(",b:"); 
    Serial.println( rgb_data[2]);
     iic_read(0x0f,data,1); 
     color=data[0];
     Serial.print(",color:"); 
    Serial.println( color,HEX);
 }
 if(sign==1)
 {
   iic_read(0x10,&data[8],1);
   i2c_start_wait(0xb4);
    i2c_write(0x10);
    i2c_write(0x31);
   // i2c_write((data[8]|0x01));
    i2c_stop();
    sign=3;
 }
   delay(200); 
   return color;
}
void iic_read(unsigned char add,unsigned char *data,unsigned char len)
{
  i2c_start_wait(0xb4);
   i2c_write(add);
   i2c_start_wait(0xb5);
   while(len-1)
   {
    *data++=i2c_readAck();
    len--;
    }
    *data=i2c_readNak();
    i2c_stop();
}
void serialEvent() {
  while (Serial.available()) {   
    Re_buf=(unsigned char)Serial.read();
   if (Re_buf=='a')
       sign=0;
    if (Re_buf=='b')    
       sign=1; 
      Re_buf=0; 
  }
}
